const DIGITS: &str = "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450";

pub fn solution() -> String {
  let digits: Vec<u64> = String::from(DIGITS)
    .chars()
    .map(|ch| ch.to_digit(10).unwrap() as u64)
    .collect();
  let mut highest = 0;
  let mut highest_digits: Vec<u64> = vec![];
  for digitgroup in digits.split(|n| *n == 0).filter(|group| group.len() >= 13) {
    let mut i = 0;
    let mut product = digitgroup[i..(i + 13)]
      .iter()
      .fold(1, |prod, n| prod * (*n as u64));
    if product > highest {
      highest = product;
    }
    while i < digitgroup.len() - 13 {
      let prev_first = digitgroup[i];
      i += 1;
      let new_last = digitgroup[i + 12];
      product = product / prev_first * new_last;
      if product > highest {
        highest = product;
        highest_digits = digitgroup[i..(i + 13)].iter().map(|&n| n).collect();
      }
    }
  }
  format!(
    "{}, from the digits {:?}",
    highest,
    highest_digits
      .into_iter()
      .map(|n| n.to_string())
      .collect::<String>()
  )
}
